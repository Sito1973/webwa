/* * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                    Paper Shaders                    *
 *       https://github.com/paper-design/shaders       *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * */

import { memo } from "react";
import { ShaderMount } from "../shader-mount.js";
import { colorPropsAreEqual } from "../color-props-are-equal.js";
import {
  liquidMetalFragmentShader,
  ShaderFitOptions,
  defaultObjectSizing,
  getShaderColorFromString,
  LiquidMetalShapes
} from "@paper-design/shaders";
import { jsx } from "react/jsx-runtime";
const defaultPreset = {
  name: "Default",
  params: {
    ...defaultObjectSizing,
    scale: 0.7,
    speed: 1,
    frame: 8e3,
    colorBack: "#000000",
    colorTint: "#ffffff",
    softness: 0.3,
    repetition: 4,
    shiftRed: 0.3,
    shiftBlue: 0.3,
    distortion: 0.1,
    contour: 1,
    shape: "circle"
  }
};
const dropsPreset = {
  name: "Drops",
  params: {
    ...defaultObjectSizing,
    speed: 1,
    frame: 0,
    colorBack: "#ffffff00",
    colorTint: "#ffffff",
    softness: 0.3,
    repetition: 3,
    shiftRed: 0.3,
    shiftBlue: 0.3,
    distortion: 0.3,
    contour: 0.88,
    shape: "metaballs"
  }
};
const containedPreset = {
  name: "Contained",
  params: {
    ...defaultObjectSizing,
    speed: 1,
    frame: 0,
    colorBack: "#ffffff00",
    colorTint: "#ffffff",
    softness: 0.3,
    repetition: 3,
    shiftRed: 0.3,
    shiftBlue: 0.3,
    distortion: 0.07,
    contour: 0,
    shape: "none",
    worldWidth: 0,
    worldHeight: 0
  }
};
const fullScreenPreset = {
  name: "Full Screen",
  params: {
    ...defaultObjectSizing,
    scale: 2.2,
    speed: 1,
    frame: 0,
    colorBack: "#00042e",
    colorTint: "#5b4dc7",
    softness: 0.45,
    repetition: 4,
    shiftRed: -0.5,
    shiftBlue: -1,
    distortion: 0.1,
    contour: 1,
    shape: "none"
  }
};
const liquidMetalPresets = [defaultPreset, containedPreset, dropsPreset, fullScreenPreset];
const LiquidMetal = memo(function LiquidMetalImpl({
  // Own props
  colorBack = defaultPreset.params.colorBack,
  colorTint = defaultPreset.params.colorTint,
  speed = defaultPreset.params.speed,
  frame = defaultPreset.params.frame,
  softness = defaultPreset.params.softness,
  repetition = defaultPreset.params.repetition,
  shiftRed = defaultPreset.params.shiftRed,
  shiftBlue = defaultPreset.params.shiftBlue,
  distortion = defaultPreset.params.distortion,
  contour = defaultPreset.params.contour,
  shape = defaultPreset.params.shape,
  // Sizing props
  fit = defaultPreset.params.fit,
  scale = defaultPreset.params.scale,
  rotation = defaultPreset.params.rotation,
  originX = defaultPreset.params.originX,
  originY = defaultPreset.params.originY,
  offsetX = defaultPreset.params.offsetX,
  offsetY = defaultPreset.params.offsetY,
  worldWidth = defaultPreset.params.worldWidth,
  worldHeight = defaultPreset.params.worldHeight,
  ...props
}) {
  const uniforms = {
    // Own uniforms
    u_colorBack: getShaderColorFromString(colorBack),
    u_colorTint: getShaderColorFromString(colorTint),
    u_softness: softness,
    u_repetition: repetition,
    u_shiftRed: shiftRed,
    u_shiftBlue: shiftBlue,
    u_distortion: distortion,
    u_contour: contour,
    u_shape: LiquidMetalShapes[shape],
    // Sizing uniforms
    u_fit: ShaderFitOptions[fit],
    u_scale: scale,
    u_rotation: rotation,
    u_offsetX: offsetX,
    u_offsetY: offsetY,
    u_originX: originX,
    u_originY: originY,
    u_worldWidth: worldWidth,
    u_worldHeight: worldHeight
  };
  return /* @__PURE__ */ jsx(
    ShaderMount,
    {
      ...props,
      speed,
      frame,
      fragmentShader: liquidMetalFragmentShader,
      uniforms
    }
  );
}, colorPropsAreEqual);
export {
  LiquidMetal,
  containedPreset,
  defaultPreset,
  dropsPreset,
  fullScreenPreset,
  liquidMetalPresets
};
//# sourceMappingURL=liquid-metal.js.map
